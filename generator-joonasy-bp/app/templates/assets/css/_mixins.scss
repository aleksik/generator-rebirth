
// ========================================
// MIXINS
// ========================================

// Convert pixels to em's
@function em($pixels, $context: $base-font-size) {
  @return #{$pixels/$context}em;
}

// Font sizing with vertical rhythm
@mixin font-size-rem($font-size, $line-height:true){
  font-size:$font-size+px;
  font-size:($font-size / $base-font-size)*1rem;
  @if $line-height == true{
    line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }
}

// Breakpoint mixin
// * Default usage: @include breakpoint(medium) {}
// * Custom usage: @include breakpoint(false, 200) {}
@mixin breakpoint($media, $min-width: false, $max-width: false, $min-height: false, $max-height: false) {

  // e.g. old symbian phones
  @if $media == "smallest" {
    @media only screen and (max-width: em($bp-small - 1)) { @content; }
  }
  // e.g. iPhone landscape and down
  @elseif $media == "small-landscape" {
    @media only screen and (max-width: em($bp-small-landscape - 1)) { @content; }
  }
  // e.g. iPhone landscape and up
  @elseif $media == "small-landscape-and-up" {
    @media only screen and (min-width: em($bp-small-landscape)) { @content; }
  }
  // e.g. Nexus portrait and down to mobile
  @elseif $media == "small-medium" {
    @media only screen and (max-width: em($bp-medium - 1)) { @content; }
  }
  // e.g. Nexus portrait and up
  @elseif $media == "small-medium-and-up" {
    @media only screen and (min-width: em($bp-small-landscape)) { @content; }
  }
  // e.g. iPad portrait and up
  @elseif $media == "medium" {
    @media only screen and (min-width: em($bp-medium)) { @content; }
  }
  // e.g. iPad portrait only
  @elseif $media == "medium-only" {
    @media only screen and (min-width: em($bp-medium)) and (max-width: em($bp-large)) { @content; }
  }
  // e.g. iPad landscape and desktop pc
  @else if $media == "large" {
    @media only screen and (min-width: em($bp-large)) { @content; }
  }
  // e.g. Large desktop pc
  @else if $media == "larger" {
    @media only screen and (min-width: em($bp-larger)) { @content; }
  }

  // Custom breakpoints
  @elseif $min-width and $max-width  {
    @media only screen and (min-width:em($min-width)) and (max-width:em($max-width)) { @content; }
  }

  @elseif $min-width and $min-height {
    @media only screen and (min-width:em($min-width)) and (min-height:em($min-height)) { @content; }
  }
  @elseif $min-width and $max-height {
    @media only screen and (min-width:em($min-width)) and (max-height:em($max-height)) { @content; }
  }

  @elseif $max-width and $min-height {
    @media only screen and (max-width:em($max-width)) and (min-height:em($min-height)) { @content; }
  }
  @elseif $max-width and $max-height {
    @media only screen and (max-width:em($max-width)) and (max-height:em($max-height)) { @content; }
  }

  @elseif $min-width {
    @media only screen and (min-width:em($min-width)) { @content; }
  }
  @elseif $max-width {
    @media only screen and (max-width:em($max-width)) { @content; }
  }
  @elseif $min-height {
    @media only screen and (min-height:em($min-height)) { @content; }
  }
  @elseif $max-height {
    @media only screen and (max-height:em($max-height)) { @content; }
  }
}

// High-resolution display
@mixin breakpoint-hdpi($ratio:1.5) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
    only screen and (min-resolution: #{round($ratio*96)}dpi),
    only screen and (min-resolution: #{$ratio}dppx) {
      @content;
    }
}

// Force overly long spans of text to truncate
// * e.g.: @include truncate(100%);
// * Where $truncation-boundary is a united measurement.
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}

// Placeholder text
@mixin placeholder($color: $placeholderText) {
  &:-moz-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

// Tap highlight color
@mixin color-tap($color:rgba(0,0,0,0)) {
  -webkit-tap-highlight-color: $color;
  tap-highlight-color: $color;
}

// Triangle shortcut
@mixin triangle($direction-h, $direction-w, $color, $width, $height) {
  width: 0;
  height: 0;
  @if $direction-h == top {
    border-top: $height solid $color;
    border-bottom: $height solid transparent;
  }
  @else {
    border-bottom: $height solid $color;
    border-top: $height solid transparent;
  }
  @if $direction-w == right {
    border-right: $width solid $color;
    border-left: $width solid transparent;
  }
  @else {
    border-left: $width solid $color;
    border-right: $width solid transparent;
  }
}